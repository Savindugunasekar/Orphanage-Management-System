generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model child {
  childid            String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  orphanageid        String        @db.Uuid
  name               String        @db.VarChar(100)
  date_of_birth      DateTime      @db.Date
  gender             gender_type
  nationality        String?       @db.VarChar(10)
  religion           String?       @db.VarChar(10)
  medicaldetails     String?
  educationaldetails String?
  application        application[]
  orphanage          orphanage     @relation(fields: [orphanageid], references: [orphanageid], onDelete: NoAction, onUpdate: NoAction)
}

model messages {
  messageid    String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sendername   String?  @db.VarChar(50)
  subject      String?
  context      String?
  replied      Boolean? @default(false)
  replycontext String?
  users        users?   @relation(fields: [sendername], references: [username], onDelete: NoAction, onUpdate: NoAction)
}

model orphanage {
  orphanageid   String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  headid        String         @unique @db.Uuid
  orphanagename String         @db.VarChar(50)
  address       String?        @db.VarChar(255)
  telno         Int?
  head_email    String         @db.VarChar(255)
  capacity      Int?
  child         child[]
  users         users          @relation(fields: [headid], references: [userid], onDelete: NoAction, onUpdate: NoAction)
  socialworker  socialworker[]
}

model socialworker {
  socialworkerid String    @id @db.Uuid
  orphanageid    String    @db.Uuid
  orphanage      orphanage @relation(fields: [orphanageid], references: [orphanageid], onDelete: NoAction, onUpdate: NoAction)
  users          users     @relation(fields: [socialworkerid], references: [userid], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  userid       String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username     String?       @unique @db.VarChar(50)
  password     String?       @db.VarChar(255)
  email        String        @unique @db.VarChar(100)
  telno        Int?
  roles        Json
  refreshtoken String?       @unique
  application  application[]
  messages     messages[]
  orphanage    orphanage?
  request      request[]
  socialworker socialworker?
}

model application {
  applicationid String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userid        String?   @db.Uuid
  childid       String?   @db.Uuid
  childname     String?   @db.VarChar(255)
  username      String?   @db.VarChar(255)
  createdat     DateTime? @default(now()) @db.Timestamp(6)
  status        Boolean?  @default(true)
  child         child?    @relation(fields: [childid], references: [childid], onDelete: NoAction, onUpdate: NoAction)
  users         users?    @relation(fields: [userid], references: [userid], onDelete: NoAction, onUpdate: NoAction)
}

model request {
  requestid  String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type       request_type
  entity     String       @db.VarChar(20)
  endpoint   String       @db.VarChar(255)
  request    Json
  receiver   String       @db.Uuid
  status     String       @default("pending") @db.VarChar(20)
  message    String?      @db.VarChar(255)
  created_at DateTime     @default(now()) @db.Timestamptz(6)
  updated_at DateTime     @default(now()) @db.Timestamptz(6)
  users      users        @relation(fields: [receiver], references: [userid], onDelete: NoAction, onUpdate: NoAction)
}

enum gender_type {
  Male
  Female
}

enum request_type {
  create
  update
  delete
}

enum status_type {
  pending
  approved
  rejected
}
